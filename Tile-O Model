namespace tileo;

class GameDesigner {
Integer numPlayers;
Integer winningTileCoordinateX;
Integer winningTileCoordinateY;

1 <@>- 2..4 Player;
1 <@>- * GameElement;
1 <@>- 1 Board;


}

class Player {
autounique id;
1 -> 1 PlayerPiece;
}



class Board {
Integer numNormalTiles;
Integer numActionTiles;
Integer numConnectionPieces;
Integer size;

1 <@>- * Tile;

}

class Deck {
isA GameElement;
//list - :[!deck:\[\s * \]];
1 <@>- 0..32 Card;
}

class Card {

}

class ExtraTurnCard {
isA Card;
String cardType = "ExtraTurn";
}

class ConnectTileCard {
isA Card;
String cardType = "ConnectTile";
}

class RemoveConnectionCard {
isA Card;
String cardType = "RemoveConnection";
}

class MovePieceCard {
isA Card;
String cardType = "MovePiece";
}

class LoseTurnCard {
isA Card;
String cardType = "LoseTurn";
}

class Tile {
isA GameElement;
autounique id;
immutable Integer coordinateX;
immutable Integer coordinateY;
Boolean hasBeenDiscovered;
Integer numConnectedPieces;
1 -> 0..4 ConnectionPiece;

}

class NormalTile {
isA Tile;
Color undiscoveredColor; /* look for color? */
Color discoveredColor; /* look for color? */

}

class ActionTile {
isA Tile;
Color color;
immutable Integer numOfSleepingTurns;
}

class Dice {
isA GameElement;
Integer generatedNum;

}

class PlayerPiece {
isA GameElement;
Integer coordinateX;
Integer coordinateY;
1 -> 1 Player;
}

class ConnectionPiece {
isA GameElement;
Boolean isUsed;
//lazy connectedTiles: Tile [0,2];

0, 2 -> 1 Tile;
}

class GameElement{

}
